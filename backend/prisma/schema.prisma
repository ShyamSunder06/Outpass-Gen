// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Student{
    id String @id
    name String
    password String
    contact String
    class String
    year Int
    department String
    op Outpass[]
    staffId1 String
    staff1 Staff @relation("Staff1",fields: [staffId1],references: [id])
    hodId String
    hod HOD @relation(fields: [hodId],references: [id])
    staffId2 String
    staff2 Staff @relation("Staff2",fields: [staffId2],references: [id])
}

model Outpass{
    id String @id @default(uuid())
    rollNo String
    student Student @relation(fields: [rollNo],references: [id])
    startDate String
    endDate   String
    outTime String
    inTime  String
    reason String
    hostelBlock String
    advisorApproved String @default("Pending")
    hodApproved String @default("Pending")
    wardApproved Boolean @default(false)
    staffreq StaffRequests[]
    hodreq HODRequests[]
}

model Staff{
    id String @id @default(uuid())
    email String @unique
    password String
    designation String
    name String
    department String
    class String
    year Int
    staffreq1 StaffRequests[] @relation("Staff1Request")
    staffreq2 StaffRequests[] @relation("Staff2Request")
    primarystudent Student[] @relation("Staff1")
    secondarystudent Student[] @relation("Staff2")
}
model StaffRequests{
    id String @id @default(uuid())
    staffId1 String
    staff1 Staff @relation("Staff1Request",fields: [staffId1],references: [id])
    staffId2 String
    staff2 Staff @relation("Staff2Request",fields: [staffId2],references: [id])
    outpassId String
    outpass Outpass @relation(fields: [outpassId],references: [id])
    approveStatus String @default("Pending")
}

model HODRequests{
    id String @id @default(uuid())
    hodId String
    Hod HOD @relation(fields: [hodId],references: [id])
    outpassId String
    outpass Outpass @relation(fields: [outpassId],references: [id])
    approveStatus String @default("Pending")
}

model HOD{
    id String @id @default(uuid())
    email String @unique
    password String
    department String
    name String
    hodreq HODRequests[]
    student Student[]
}


model Warden{
    email String @id
    password String
    name String
}

